staging area - files that are being tracked and modified are in the staging area
git add . is used and files are modified

working area - files that are not being tracked are in working area
git add is not used on those files

A file can be in both working area and staging area based on whether git add is used or not

git init - Initialize a git repo

git add . - add all the files to track

git status - check the status of the file which are being tracked

git log - view all commits

git commit -m "first commit" - make a commit

git branch - view all branches

git reset <filename> - unstage the file (opposite to git add) but changes will be there the file will move to working area from staging area

git checkout <commit hash> - view previous version of code
git checkout <branch name> - go to a specific branch

If there are 3 versions and you moved to version 1 using git checkout and made changes and commited and created a new version "version1 updated". 
This will create a new branch on top of version 1

To avoid this branching and restore the code from previous versions
git checkout <hash | branch> <file | folder> - gives the previous version of that file | folder in the staging area

go to the lastest commit
use the git checkout <hash | branch> <file | folder> to get the file from the branched commit and restore it 

    1. git checkout master
    2. git checkout 79150870163ae2ef27f0a7109bd3d66b9a0d09ae .
    3. git commit


setting alias
git config --global alais.name "command"
eg: git config --global alias.cm "commit -m"

rm -rf .git - completely remove git